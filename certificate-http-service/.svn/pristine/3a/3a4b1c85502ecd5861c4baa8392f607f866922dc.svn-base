package com.ule.cerservice.controller;

import com.alibaba.fastjson.JSON;
import com.ule.cerservice.config.Config;
import com.ule.cerservice.model.CertificateInfo;
import com.ule.cerservice.model.PageResponse;
import com.ule.cerservice.service.CerManagerService;
import com.ule.cerservice.utils.CerUtil;
import com.ule.cerservice.utils.ConvertUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RestController;
import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @Author fanxunli
 * @Description: UI界面接口提供类
 * @Param:
 * @Return:
 * @Create: 19-1-10 下午5:46
 */
@RestController
@RequestMapping(value = "/cermanager")
public class CreManagerController {
    private final static Logger logger = LoggerFactory.getLogger(CreManagerController.class);

    @Autowired
    private Config config;
    @Autowired
    private CerManagerService cerManagerService;

    @RequestMapping(value = "/getCerInfo")
    public String getCerInfo(HttpServletRequest request) {
        String busiName=request.getParameter("busiName");
        String sysName=request.getParameter("sysName");
        String cerSendType=request.getParameter("cerSendType");
        String cerType=request.getParameter("cerType");
        String channelCode=request.getParameter("channelCode");
        String cerEnv=request.getParameter("cerEnv");

        CertificateInfo info=new CertificateInfo();
        info.setBusiName(busiName);
        info.setSysName(sysName);
        info.setCerSendType(Integer.parseInt(cerSendType));
        info.setCerEnv(Integer.parseInt(cerEnv));

        if (cerSendType!=null&&"1".equals(cerSendType)){
            info.setCerType(Integer.parseInt(cerType));
        }
        if (cerSendType!=null&&"2".equals(cerSendType)){
            info.setChannelCode(channelCode);
        }
        PageResponse infolist= cerManagerService.findAllCerInfo(info,0);
        if (infolist.getResultData().size()>0){
            return ((CertificateInfo)infolist.getResultData().get(0)).getCerContent();
        }else {
            return "nocer";
        }
    }
    /*
     * @description  证书查询接口
     * @author fanxunli
     * @date
     * @return java.lang.String
     */
    @RequestMapping(value = "/query")
    public String queryCerInfo(HttpServletRequest request) {
        String searchval=request.getParameter("searchval");
        String cersendtype=request.getParameter("cersendtype");
        String pagenum=request.getParameter("pagenum");
        CertificateInfo info=new CertificateInfo();
        if (searchval!=null&&!"".equals(searchval)){
            info.setSysName(searchval);
        }
        if (cersendtype!=null&&!"".equals(cersendtype)){
            info.setCerSendType(new Integer(cersendtype));
        }
        PageResponse response= cerManagerService.findAllCerInfo(info,Integer.parseInt(pagenum));
        return JSON.toJSONString(response);
    }
    /*
     * @description  内部证书颁发接口
     * @author fanxunli
     * @date
     * @return java.lang.String
     */
    @RequestMapping(value = "/createCer")
    public String createCer(HttpServletRequest request) {
        String msg=request.getParameter("msg");
        logger.info("接收到的内部证书创建指令为："+msg);
        if (msg!=null && !"".equals(msg)){
            List<CertificateInfo> list=new ArrayList<>();
            CertificateInfo info= JSON.parseObject(msg,CertificateInfo.class);
            String cername=(info.getBusiName()+"_"+info.getSysName()+"_"+info.getChannelCode()).replace(" ", "");
            FileInputStream fis=null;
            try {
                String bashCommand = "sh "+ config.getShellPath()+ " "+cername+" "+ info.getCerPassword()+" "+ config.getCerStorePath() +" " +info.getEmail()+" "+config.getExpirationDay();
                logger.info("执行的shell命令为："+bashCommand);
                Runtime runtime = Runtime.getRuntime();
            Process pro = runtime.exec(bashCommand);
            int status = pro.waitFor();
            if (status != 0){
                logger.info("Failed to call shell's command ");
            }
                //shell脚本执行完成，证书文件已经生成，开始把数据存入数据库
                //cer文件存入mysql
                File cerFile = new File(config.getCerStorePath()+File.separator+cername+"-pub.cer");    //Test1-Test1+ule-pub.cer
                fis = new FileInputStream( cerFile );
                byte[] bytes = new byte[fis.available()];
                fis.read(bytes);
                String cer_Str = ConvertUtil.byte2hex( bytes );
                //String cer_Str = "122222222223232332222222222222222222222";
                CertificateInfo cer_pub=new CertificateInfo();
                cer_pub.setBusiName(info.getBusiName());
                cer_pub.setSysName(info.getSysName());
                cer_pub.setCerSendType(1);
                cer_pub.setCerType(1);
                cer_pub.setChannelCode("ule");
                cer_pub.setExpirationDate(info.getExpirationDate());
                cer_pub.setEmail(info.getEmail());
                cer_pub.setCerName(config.getCerStorePath()+File.separator+cername+"-pub.cer");
                cer_pub.setDownPassword(info.getDownPassword());
                cer_pub.setCerEnv(info.getCerEnv());
                cer_pub.setCerContent(cer_Str);

                //pfx文件存入mysql
                File pfxFile = new File(config.getCerStorePath()+File.separator+cername+".pfx");    //Test1-Test1+ule-pub.cer
                fis = new FileInputStream( pfxFile );
                byte[] bytes1 = new byte[fis.available()];
                fis.read(bytes1);
                fis.close();
                String pfx_Str = ConvertUtil.byte2hex( bytes1 );
                //String pfx_Str = "122222222223232332222222222222222222222";
                CertificateInfo cer_pfx=new CertificateInfo();
                cer_pfx.setBusiName(info.getBusiName());
                cer_pfx.setSysName(info.getSysName());
                cer_pfx.setCerSendType(1);
                cer_pfx.setCerType(3);
                cer_pfx.setExpirationDate(info.getExpirationDate());
                cer_pfx.setEmail(info.getEmail());
                cer_pfx.setChannelCode("ule");
                cer_pfx.setCerName(config.getCerStorePath()+File.separator+cername+".pfx");
                cer_pfx.setDownPassword(info.getDownPassword());
                cer_pfx.setCerEnv(info.getCerEnv());
                cer_pfx.setCerContent(pfx_Str);
                list.add(cer_pub);
                list.add(cer_pfx);
                cerManagerService.saveCzbankPay(list);
                return "success";
            }catch (Exception e){
                e.printStackTrace();
                return "fail";
            }finally {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }else{
            return "接收到的内部证书创建内容为空";
        }
    }
    /*
     * @description  删除证书接口
     * @author fanxunli
     * @date
     * @return java.lang.String
     */
    @RequestMapping(value = "/delCer")
    public String delCer(HttpServletRequest request) {
        String id=request.getParameter("id");
        //LDAPUtil.getInstance().deleteEntry("uid="+uid+",dc=ule,dc=com");
        cerManagerService.del(new Integer(id));
        return "success";
    }


    /*
     * @description 外部证书上传接口
     * @author fanxunli
     * @date
     * @return java.lang.String
     */
    @RequestMapping(value = "/saveUploadCer")
    public String saveUploadCer(HttpServletRequest request) {
        String msg=request.getParameter("msg");
        logger.info("接收到的外部证书上传指令为："+msg);
        if (msg!=null && !"".equals(msg)){
            List<CertificateInfo> list=new ArrayList<>();
            CertificateInfo info=JSON.parseObject(msg,CertificateInfo.class);
            String cername=(info.getBusiName()+"-"+info.getSysName()+"-"+info.getChannelCode()).replace(" ", "");
            OutputStream o=null;
            InputStream in=null;
            try {
                String fileName="";
                //先把外部上传的证书文件保存
                if(info.getCerOutType()==1){
                    String 	cer_out_filename=info.getCerOutFilename();
                    String[] strArray = cer_out_filename.split("\\.");
                    int suffixIndex = strArray.length -1;
                    fileName=config.getCerStorePath()+File.separator+cername+"-pub."+strArray[suffixIndex];
                }else{
                    fileName=config.getCerStorePath()+File.separator+cername+"-pub.txt";
                }
                o = new FileOutputStream(fileName);
                byte[] imgByte = ConvertUtil.hex2byte(info.getCerContent());
                in = new ByteArrayInputStream( imgByte );
                byte[] b = new byte[1024];
                int nRead = 0;
                while( ( nRead = in.read(b) ) != -1 ){
                    o.write( b, 0, nRead );
                }
                o.flush();

                CertificateInfo cer=new CertificateInfo();
                cer.setBusiName(info.getBusiName());
                cer.setSysName(info.getSysName());
                cer.setCerSendType(2);
                cer.setCerType(1);
                if(info.getCerOutType()==1){
                    Map cerInfoMap=CerUtil.getCerInfo(fileName);
                    cer.setExpirationDate(cerInfoMap.get("NotAfter").toString());
                }
                cer.setEmail(info.getEmail());
                cer.setChannelCode(info.getChannelCode());
                cer.setCerName(fileName);
                cer.setDownPassword(info.getDownPassword());
                cer.setCerEnv(info.getCerEnv());
                cer.setCerContent(info.getCerContent());
                cer.setCerOutType(info.getCerOutType());
                cer.setCerOutFilename(info.getCerOutFilename());

                list.add(cer);
                cerManagerService.saveCzbankPay(list);
                return "success";
            }catch (Exception e){
                e.printStackTrace();
            }finally {
                try {
                    o.close();
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return "fail";
        }else{
            return "接收到的外部证书上传内容为空";
        }
    }

}

